/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
/* #include <dt-bindings/zmk/mouse.h> */

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_comma";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LGUI)>;
        };
        mo1_to1: mo1_to1 {
            compatible = "zmk,behavior-mod-morph";
            label = "mo1_to1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
            mods = <(MOD_LGUI)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB     |  Q  |  W  |  F  |  P  |  B  | ------ |  J   |  L   |  U   |  Y   |  :   |   BSPC     |
            // | ESC     |  A  |  R  |  S  |  T  |  G  | ------ |  M   |  N   |  E   |  I   |  O   |   ENTER    |
            // | LSHIFT  |  Z  |  X  |  C  |  D  |  V  | ------ |  K   |  H   |  >.  | <,   |  /?  |   CAPS     |
            //        | LALT/hyper |  SPC/LGUI  | CTRL | ------ | to3  | to1 |  to2 |
            bindings = <
            &kp TAB           &kp Q   &kp W   &kp F   &kp P   &kp B                     &kp J   &kp L      &kp U     &kp Y       &kp COLON   &bspc_del
            &kp ESC            &kp A   &kp R   &kp S   &kp T   &kp G                    &kp M   &kp N      &kp E     &kp I       &kp O       &kp ENTER
            &kp LSHIFT        &kp Z   &kp X   &kp C   &kp D   &kp V                     &kp K   &kp H      &kp DOT   &kp COMMA   &kp FSLH    &kp CAPS
                 &mt LC(LS(LA(LGUI))) LALT   &mt LGUI SPACE    &kp LCTRL               &mo 3   &mo1_to1   &mo 2 
        >;
        };
        layer_one {
            // -----------------------------------------------------------------------------------------
            // |  ~     |  !  |  @  |  #  |  $  |  %  | ------ |  ^   |  &   |  *  |  ;   |  =  |     |
            // |  `     |  <  |  >  |  (  |  )  |  -  | ------ |      |  .   |  ,  |  '   |  \  |     |
            // |        |  [  |  ]  |  {  |  }  |  _  | ------ |  |   |  +   |  ?  |  "   |  /  |     |
            //                      |     |     |     | ------ |      |  to0 | to2 |
            bindings = <
            &kp TILDE   &kp EXCL    &kp AT     &kp HASH   &kp DLLR   &kp PRCNT          &kp CARET      &kp AMPS    &kp STAR    &kp SEMI    &kp EQUAL   &trans
            &kp GRAVE   &kp LT      &kp GT     &kp LPAR   &kp RPAR   &kp MINUS          &kp EQUAL      &kp DOT     &kp COMMA   &kp SQT     &kp FSLH    &trans
            &trans      &kp LBKT    &kp RBKT   &kp LBRC   &kp RBRC   &kp UNDER          &kp PIPE       &kp PLUS    &kp QMARK   &kp DQT     &kp BSLH    &trans
                                               &trans     &trans     &trans  				    &trans   &to 0     &enter_to2
        >;
        };
        layer_two {
            // -----------------------------------------------------------------------------------------
            // |        |  PTAB  | UP    | NTAB   |  BRIGHT-  |  BRIGHT+  | ------ |  =  |  7  |  8  |  9  |  *  |          |
            // |        |  LEFT  | DOWN  | RIGHT  |  VOL-     |  VOL+     | ------ |  /  |  4  |  5  |  6  |  -  |          |
            // | BT_CLR | BT1    | BT2   | BT3    |  PLAY     |  MUTE     | ------ |  0  |  1  |  2  |  3  |  +  |    ^     |
            //                                           |     |    |    | ------ |     | to0 | to0 |
            bindings = <
            &trans       &kp LC(LS(TAB))  &kp UP         &kp RC(TAB)         &kp C_BRI_DN   &kp C_BRI_UP   	      &kp EQUAL   &kp N7   &kp N8   &kp N9   &kp KP_MULTIPLY   &trans
            &trans       &kp LEFT        &kp DOWN       &kp RIGHT      &kp C_VOL_DN   &kp C_VOL_UP    	    &kp FSLH    &kp N4   &kp N5   &kp N6   &kp MINUS         &trans
            &bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &kp C_PP       &kp C_MUTE            &kp N0      &kp N1   &kp N2   &kp N3   &kp PLUS          &kp CARET
                                                        &trans         &trans         &trans  				      &trans      &to 0   &to 0
        >;
        };
        temp_layer {
            // -----------------------------------------------------------------------------------------
            // |      |  1    |  2     |  3    |  4  |  5  | ------ |  6   |  7  |  8  |  9  |  0  |         |
            // |      |       | UP     |       |     |     | ------ |  H   |  J  |  K  |  L  |     |         |
            // |      | LEFT  | DOWN   | RIGHT |     |     | ------ |  PGDN/HOME  | LCTRL(D)    | LCTRL(U)    | PGUP/END    |     |         |
            //                             |     |    |    | ------ |      |     |     |
            bindings = <
            &trans   &kp N1     &kp N2     &kp N3     &kp N4   &kp N5            &kp N6            &kp N7      &kp N8      &kp N9          &kp N0   &trans
            &trans   &trans     &kp UP     &trans     &trans   &trans            &kp H             &kp J       &kp K       &kp L           &trans   &trans
            &trans   &kp LEFT   &kp DOWN   &kp RIGHT  &trans   &trans            &td HOME PG_DN    &kp LC(D)   &kp LC(U)   &td END PG_UP   &trans   &trans
            
                                           &trans      &trans   &trans  				  &to 0   &trans   &trans
        >;
        };
    };
};
