#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define Base 0
#define Num 1
#define Nav 2
#define Media 3

#include "combos.dtsi"  // must be sourced after layer-shortcuts
#include "mouse.dtsi"

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;              // repeat on tap-into-hold
    hold-trigger-key-positions = <0>;  // tap on interrupt
};

&lt {
    quick_tap_ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ent_l {
            timeout-ms = <40>;
	          key-positions = <31 32>;
            bindings = <&kp RET>;
        };
        combo_ent_r {
            timeout-ms = <40>;
	          key-positions = <3 4>;
            bindings = <&kp RET>;
        };
        combo_tobase {
            timeout-ms = <50>;
	          key-positions = <38 39>;
            bindings = <&to Base>;
        };
        combo_toNav {
            timeout-ms = <50>;
	          key-positions = <36 37>;
            bindings = <&to Nav>;
        };
        combo_dqt {
            timeout-ms = <50>;
	          key-positions = <9 10>;
            bindings = <&kp DQT>;
        };
        combo_excl {
            timeout-ms = <30>;
	          key-positions = <31 33>;
            bindings = <&kp EXCL>;
        };
        combo_qmark {
            timeout-ms = <30>;
	          key-positions = <32 33>;
            bindings = <&kp QMARK>;
        };
        combo_prcnt {
            timeout-ms = <40>;
	          key-positions = <30 31>;
            layers = <1>;
            bindings = <&kp PRCNT>;
        };
        combo_esc {
            timeout-ms = <40>;
	          key-positions = <27 28>;
            bindings = <&kp ESC>;
        };
        combo_under {
            timeout-ms = <40>;
	          key-positions = <4 5>;
            bindings = <&kp UNDER>;
        };
        combo_plus {
            timeout-ms = <40>;
	          key-positions = <16 17>;
            bindings = <&kp PLUS>;
        };
        combo_capsword {
            timeout-ms = <40>;
	          key-positions = <13 22>;
            bindings = <&caps_word>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        fn_td: fn_td {
            compatible = "zmk,behavior-hold-tap";
            label = "FN_TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        mo1_to1: mo1_to1 {
            compatible = "zmk,behavior-mod-morph";
            label = "mo1_to1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
            mods = <(MOD_LGUI)>;
        };
        colon_quote: colon_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp APOS>, <&kp COLON>;
        };
        par_td: par_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PAR_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };
        bkt_td: bkt_td {
            compatible = "zmk,behavior-tap-dance";
            label = "BKT_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };
        brc_td: brc_td {
            compatible = "zmk,behavior-tap-dance";
            label = "BRC_TD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };
        lt_gt: lt_gt {
            compatible = "zmk,behavior-tap-dance";
            label = "lt_gt";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };
        fslh_bslh: fslh_bslh {
            compatible = "zmk,behavior-tap-dance";
            label = "FSLH_BSLH";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp FSLH>, <&kp BSLH>;
        };
        grave_tilde: grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "grave_tilde";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };
        at_amps: at_amps {
            compatible = "zmk,behavior-tap-dance";
            label = "at_amps";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp AT>, <&kp AMPS>;
        };
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "bspc_del";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_RGUI)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
          label = "Base";
            bindings = <
            &kp TAB    &kp Q   &kp W   &kp F    &kp P    &kp B                 &kp J      &kp L       &kp U       &kp Y        &colon_quote   &to Nav
            &kp ESC    &kp A   &kp R   &kp S    &kp T    &kp G                 &kp M      &kp N       &kp E       &kp I        &hm RGUI O     &to Num
            &none      &kp Z   &kp X   &kp C    &kp D    &kp V                 &kp K      &kp H       &kp COMMA   &kp DOT      &fslh_bslh     &to Media
                       &mo Nav   &lt Media SPACE   &sk LSHIFT                  &mo Num    &bspc_del   &kp LCTRL
        >;
        };
        num_layer {
            label = "Num";
            bindings = <
            &trans   &grave_tilde  &fn_td F7 N7   &fn_td F8 N8   &fn_td F9 N9   &kp MINUS             &at_amps    &par_td    &bkt_td    &brc_td       &trans           &trans
            &trans   &kp STAR      &fn_td F4 N4   &fn_td F5 N5   &fn_td F6 N6   &kp EQUAL             &kp H       &kp J      &kp K      &hm RALT L    &hm LGUI SEMI    &trans
            &trans   &kp PIPE      &fn_td F1 N1   &fn_td F2 N2   &fn_td F3 N3   &kp CARET             &kp DLLR    &kp HASH   &trans     &trans        &trans           &trans
                                                  &kp N0         &trans         &trans                &none       &trans     &trans
        >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
            &trans       &kp TAB   &kp LS(TAB) &kp K_COPY       &kp K_PASTE   &kp K_UNDO           &mwh SCROLL_UP      &mkp LCLK        &mmv MOVE_UP      &mkp RCLK         &mwh SCROLL_LEFT    &trans
            &trans       &sk LGUI  &sk LALT    &sk LCTRL        &sk LSHIFT    &kp LG(F)            &mwh SCROLL_DOWN    &mmv MOVE_LEFT   &mmv MOVE_DOWN    &mmv MOVE_RIGHT   &mwh SCROLL_RIGHT   &trans
            &trans       &kp F5    &kp LC(W)   &kp LC(LS(TAB))  &kp RC(TAB)   &kp LC(LS(T))        &kp HOME            &kp PG_DN        &kp PG_UP         &kp END           &kp INS             &trans
                                                 &trans         &kp PRSC        &trans               &trans              &trans           &trans
        >;
        };
        media_layer {
            label = "Media";
            bindings = <
            &trans   &none       &none        &kp K_VOL_DN   &kp K_VOL_UP    &kp K_MUTE          &none        &none          &none           &none         &none         &trans
            &trans   &none       &none        &none          &none           &kp LG(F)           &kp LEFT        &kp DOWN     &kp UP       &kp RIGHT      &sk RGUI      &trans
            &trans   &kp LG(Z)   &kp LG(X)    &kp LG(C)      &kp LG(D)       &kp LG(V)           &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &trans
                                              &trans         &trans          &trans              &trans       &trans         &trans
        >;
        };
    };
};
