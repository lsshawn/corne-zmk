/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
/* #include <dt-bindings/zmk/mouse.h> */

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI)>;
        };
        m_h: m_h {
            compatible = "zmk,behavior-mod-morph";
            label = "m_h";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp H>;
            mods = <(MOD_LGUI)>;
        };
        n_j: n_j {
            compatible = "zmk,behavior-mod-morph";
            label = "n_j";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp J>;
            mods = <(MOD_LGUI)>;
        };
        e_k: e_k {
            compatible = "zmk,behavior-mod-morph";
            label = "e_k";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp K>;
            mods = <(MOD_LGUI)>;
        };
        i_l: i_l {
            compatible = "zmk,behavior-mod-morph";
            label = "i_l";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp L>;
            mods = <(MOD_LGUI)>;
             };
        space_tab: space_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "space_tab";
            #binding-cells = <0>;
            bindings = <&kp SPC>, <&kp TAB>;
            mods = <(MOD_LGUI|MOD_LSFT)>;
        };
        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_comma";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COMMA>;
            mods = <(MOD_LSFT)>;
        };
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_comma";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
        };
        enter_to2: enter_to2 {
            compatible = "zmk,behavior-mod-morph";
            label = "enter_to2";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&to 2>;
            mods = <(MOD_LGUI)>;
        };
        mo1_to1: mo1_to1 {
            compatible = "zmk,behavior-mod-morph";
            label = "mo1_to1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
            mods = <(MOD_LGUI)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | ESC/` |  Q  |  W  |  F  |  P  |  B  | ------ |  J   |  L   |  U   |  Y   |  ;   | BSPC     |
            // | SHIFT |  A  |  R  |  S  |  T  |  G  | ------ |  M   |  N   |  E   |  I   |  O   | ENTER    |
            // | CTRL  |  Z  |  X  |  C  |  D  |  V  | ------ |  K   |  H   |  <,  |  >.  |  ?/  |   -_     |
            //               | GUI |  SPC/MEH  | ALT | ------ | BSPC  | to1 |  to2 |
            bindings = <
            &gresc           &kp Q   &kp W   &kp F   &kp P   &kp B           &kp J   &kp L   &kp U       &kp Y     &kp SEMI   &kp BSPC
            &sk LSHIFT       &kp A   &kp R   &kp S   &kp T   &kp G           &m_h    &n_j    &e_k        &i_l      &kp O      &kp ENTER
            &kp LCTRL        &kp Z   &kp X   &kp C   &kp D   &kp V           &kp K   &kp H   &kp COMMA   &kp DOT   &kp FSLH   &kp MINUS
                     &kp LGUI   &space_tab   &mt LC(LS(LALT)) LALT           &kp BSPC   &mo1_to1   &enter_to2 
        >;
        };
        layer_one {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |  %  | ------ |  ^   |  &   |  *  | '" |  \| |      |
            // |      |  1  |  2  |  3  |  4  |  5  | ------ |  6   |  7   |  8  |  9 |  0  |      |
            // |      | [{  |  ]} |  (  |  )  |  -_ | ------ |  .,  |  <   |  >  | ;: |  /  |  =+  |
            //                    |     |     |     | ------ |      |  to0 | to2 |
            bindings = <
            &trans     &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT          &kp CARET       &kp AMPS   &kp STAR   &kp APOS   &kp BSLH   &trans
            &trans     &kp N1     &kp N2     &kp N3     &kp N4     &kp N5             &kp N6          &kp N7     &kp N8     &kp N9     &kp N0     &trans
            &trans     &kp LBKT   &kp RBKT   &kp LPAR   &kp RPAR   &kp MINUS          &dot_comma      &kp LT     &kp GT   &kp SEMI     &kp FSLH   &kp EQUAL
                                             &trans     &trans     &trans  				    &trans   &to 0     &enter_to2
        };
        layer_two {
            // -----------------------------------------------------------------------------------------
            // |        | UP   |       | PLAY/PAUSE |  VOL+  |  BRIGHT+  | ------ |  =  |  7  |  8  |  9  |  *  |          |
            // |  LEFT  | DOWN | RIGHT | MUTE       |  VOL-  |  BRIGHT-  | ------ |  /  |  4  |  5  |  6  |  -  |          |
            // | BT_CLR | BT1  | BT2   | BT3        |  BT4   |  BT5      | ------ |  0  |  1  |  2  |  3  |  +  |    ^     |
            //                                           |     |    |    | ------ |     | to0 | to0 |
            bindings = <
            &trans       &kp UP          &trans         &kp C_PP       &kp C_VOL_UP   &kp C_BRI_UP   	      &kp EQUAL   &kp N7   &kp N8   &kp N9   &kp KP_MULTIPLY   &trans
            &kp LEFT     &kp DOWN        &kp RIGHT      &kp C_MUTE     &kp C_VOL_DN   &kp C_BRI_DN    	    &kp FSLH    &kp N4   &kp N5   &kp N6   &kp MINUS         &trans
            &bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4          &kp N0      &kp N1   &kp N2   &kp N3   &kp PLUS          &kp CARET
                                                        &trans         &trans         &trans  				      &trans      &to 0   &to 0
        >;
        };
        temp_layer {
            // -----------------------------------------------------------------------------------------
            // |      |      |  UP  |       |       |       | ------ |     |     |     |     |     |         |
            // |      | LEFT | DOWN | RIGHT |       |       | ------ |  H  |  J  |  K  |  L  |     |         |
            // |      |      |      |       |       |       | ------ |     |     |     |     |     |         |
            //                              |     |    |    | ------ |     |     |     |
            bindings = <
            &trans   &trans     &kp UP     &trans      &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
            &trans   &kp LEFT   &kp DOWN   &kp RIGHT   &trans   &trans            &kp H    &kp J    &kp K    &kp L    &trans   &trans
            &trans   &trans     &trans     &trans      &trans   &trans            &trans   &trans   &trans   &trans   &trans   &to 0
                                           &trans      &trans   &trans  				  &trans   &trans   &trans
        >;
        };
    };
};

